import { Finder } from './Finder';
import type { PaletteOptions } from './options';
import type { ImageSource, QuantizedColor } from './types';
export type PaletteConfig = Required<PaletteOptions>;
export declare class Palette {
    config: PaletteConfig;
    colors: Array<QuantizedColor>;
    finder?: Finder;
    protected _stream: ReadableStream<Array<QuantizedColor>>;
    protected _streamControler: ReadableStreamDefaultController<ImageSource>;
    constructor(options?: PaletteOptions);
    protected _resolveOptions(options: PaletteOptions): PaletteConfig;
    protected _createStream(): ReadableStream<QuantizedColor[]>;
    addSample(sample: ImageSource): void;
    generate(): Promise<Array<QuantizedColor>>;
    match(color: Array<number> | string | number): {
        color: QuantizedColor;
        index: number;
    } | undefined;
    toColors(): QuantizedColor[];
    toHexColors(): string[];
    toRgbColors(): import("./types").Rgb[];
    toRgbIntColors(): number[];
    toLabColors(): import("./types").Oklab[];
    toUint8Array(length?: number): Uint8ClampedArray;
    clear(): void;
}
