import type { Oklab, QuantizedColor } from './types';
interface FinderColorNode {
    left: number;
    right: number;
    longest: keyof Oklab;
    lab: Oklab;
    index: number;
}
export declare class Finder {
    protected _premultipliedAlpha: boolean;
    protected _tint: number[];
    protected _cache: Map<number, Map<number, number>>;
    protected _colorMap: Array<FinderColorNode>;
    constructor(colors?: Array<QuantizedColor>, _premultipliedAlpha?: boolean, _tint?: number[]);
    setup(colors: Array<QuantizedColor>): void;
    protected _colormapNearestNode(current: number, target: Oklab, output: {
        dist: number;
        index: number;
    }): void;
    findNearestIndex(r: number, g: number, b: number, a?: number): number;
}
export {};
